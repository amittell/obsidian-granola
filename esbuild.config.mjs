import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	plugins: prod
		? [
				{
					name: 'performance-stubs',
					setup(build) {
						build.onResolve({ filter: /performance-(monitor|utils)$/ }, args => {
							const stubPath = path.resolve(
								__dirname,
								'src/performance/performance-stubs.ts'
							);
							return { path: stubPath };
						});
					},
				},
			]
		: [],
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins,
	],
	format: 'cjs',
	target: 'es2018',
	logLevel: 'info',
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	outfile: 'main.js',
	splitting: false, // Obsidian plugins need single file
	// Advanced optimizations for production
	minify: prod,
	minifyWhitespace: prod,
	minifyIdentifiers: prod,
	minifySyntax: prod,
	keepNames: !prod,
	// Dead code elimination and conditional compilation
	define: prod
		? {
				'process.env.NODE_ENV': '"production"',
				DEBUG: 'false',
				__DEV__: 'false',
				ENABLE_PERFORMANCE_MONITORING: 'false',
				PERFORMANCE_MONITORING_ENABLED: 'false',
			}
		: {
				'process.env.NODE_ENV': '"development"',
				DEBUG: 'true',
				__DEV__: 'true',
				ENABLE_PERFORMANCE_MONITORING: 'true',
				PERFORMANCE_MONITORING_ENABLED: 'true',
			},
	// Advanced tree shaking
	treeShaking: true,
	// Optimize for size over speed in production
	...(prod && {
		legalComments: 'none',
		// Aggressive optimization settings
		charset: 'utf8',
		// Drop debug code
		drop: ['debugger', 'console'],
		// Drop labels for dead code elimination
		dropLabels: ['DEV', 'DEBUG', 'TEST'],
		// Ignore annotations for more aggressive optimization
		ignoreAnnotations: true,
		// Mangle properties for maximum compression (be careful with this)
		mangleProps: /^_/,
		// Reserved names to avoid mangling critical properties
		reserveProps: /^(constructor|prototype|__proto__|length|name|toString|valueOf)$/,
		// Pure call annotations for better tree shaking
		pure: ['console.log', 'console.debug', 'console.warn', 'console.info'],
	}),
	metafile: true,
});

if (prod) {
	const result = await context.rebuild();

	// Save metafile for analysis if requested
	if (process.argv.includes('--metafile=meta.json')) {
		const fs = await import('fs');
		fs.writeFileSync('meta.json', JSON.stringify(result.metafile));
		console.log('Metafile written to meta.json for bundle analysis');
	}

	process.exit(0);
} else {
	await context.watch();
}
